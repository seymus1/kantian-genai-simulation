import numpy as np, pandas as pdnp.random.seed(42)themes = {    "Ease of Use & Learnability": {"mean": 4.1169, "std": 0.2709},    "System Efficiency & Learning Burden": {"mean": 4.1240, "std": 0.0910},    "Perceived Complexity & Integration": {"mean": 3.7100, "std": 0.2160}}n = 10000df = pd.DataFrame({k: np.clip(np.random.normal(v["mean"], v["std"], n), 1, 5).round(4) for k, v in themes.items()})a1 = lambda c: all(not (x < x) for x in c)  # irreflexivitya2 = lambda c: all((not (a < b and b < c)) or (a < c) for a, b, c in zip(*(sorted(set(c))[i:] for i in range(3))))  # transitivitya3 = lambda c: all((a < b) or (b < a) or (a == b) for i, a in enumerate(sorted(set(c))) for b in sorted(set(c))[i+1:])  # total comparabilitya4 = lambda c: all(any(a < b for b in set(c) if b != a) for a in set(c))  # no greatest element (no endpoints, part 1)a5 = lambda c: all(any(b < a for b in set(c) if b != a) for a in set(c))  # no least element (no endpoints, part 2)a6 = lambda c: all(any(a < x < b for x in c) for a, b in zip(*(sorted(set(c))[i:] for i in (0, 1))))  # densityR = {"A1": [], "A2": [], "A3": [], "A4": [], "A5": [], "A6": []}for col in df.columns:    c = df[col]    R["A1"].append(a1(c)); R["A2"].append(a2(c)); R["A3"].append(a3(c))    R["A4"].append(a4(c)); R["A5"].append(a5(c)); R["A6"].append(a6(c))print("\nAxiom Evaluation (10,000 students – 6 Axioms × 3 Themes):\n")print(pd.DataFrame(R, index=df.columns).to_string())